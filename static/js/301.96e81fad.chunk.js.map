{"version":3,"file":"static/js/301.96e81fad.chunk.js","mappings":"+NAoBA,IAbmB,SAAC,GAAgC,IAA9BA,EAA6B,EAA7BA,aAAiBC,GAAY,YAC3CC,GAAKC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAEnC,OACE,SAAC,KAAD,QACEC,QAASH,EACTI,QAAQ,WACRC,SAAUP,GACNC,GAGT,C,2HCZD,EANqB,CACnBO,KAAM,GACNC,MAAO,GACPC,SAAU,ICqBZ,EAxBe,CACbF,KAAM,CACJG,KAAM,OACNH,KAAM,OACNI,UAAU,EACVC,MAAO,aAGTJ,MAAO,CACLE,KAAM,QACNH,KAAM,QACNI,UAAU,EACVC,MAAO,cAGTH,SAAU,CACRC,KAAM,WACNH,KAAM,WACNI,UAAU,EACVC,MAAO,kB,mBC8BX,EAxCqB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtB,GAA8CC,EAAAA,EAAAA,GAAQ,CACpDC,aAAAA,EACAF,SAAAA,IAFMG,EAAR,EAAQA,MAAOjB,EAAf,EAAeA,aAAckB,EAA7B,EAA6BA,aAIrBV,EAA0BS,EAA1BT,KAAMC,EAAoBQ,EAApBR,MAAOC,EAAaO,EAAbP,SAErB,OACE,kBAAMI,SAAUI,EAAhB,WACE,SAACC,EAAA,GAAD,gBACEC,GAAI,CAAEC,MAAO,SACbC,MAAOd,EACPR,aAAcA,GACVuB,EAAAA,MAJN,IAKEC,OAAO,YAET,SAACL,EAAA,GAAD,gBACEC,GAAI,CAAEC,MAAO,QAASI,UAAW,QACjCH,MAAOb,EACPT,aAAcA,GACVuB,EAAAA,OAJN,IAKEC,OAAO,YAET,SAACL,EAAA,GAAD,gBACEC,GAAI,CAAEC,MAAO,QAASI,UAAW,QACjCH,MAAOZ,EACPV,aAAcA,GACVuB,EAAAA,UAJN,IAKEC,OAAO,YAET,SAACE,EAAA,EAAD,CACEN,GAAI,CAAEC,MAAO,QAASI,UAAW,QACjCnB,QAAQ,YACRK,KAAK,SAHP,uBASL,E,SC9CKgB,E,QAAcC,EAAAA,IAAH,qHCkBjB,EAbqB,WACnB,IAAMC,GAAWC,EAAAA,EAAAA,MAKjB,OACE,SAACH,EAAD,WACE,SAAC,EAAD,CAAcb,SANG,SAAAiB,GACnBF,GAASG,EAAAA,EAAAA,IAAOD,GACjB,KAOF,C,kECGD,IAnBgB,SAAC,GAA6B,IAA5Bf,EAA2B,EAA3BA,aAAcF,EAAa,EAAbA,SAC5B,GAA0BmB,EAAAA,EAAAA,WAAS,UAAIjB,IAAvC,eAAOC,EAAP,KAAciB,EAAd,KAEMlC,GAAemC,EAAAA,EAAAA,cAAY,YAAe,IAAbC,EAAY,EAAZA,OACxB5B,EAAe4B,EAAf5B,KAAMc,EAASc,EAATd,MACbY,GAAS,SAAAG,GACL,OAAO,kBAAIA,GAAX,cAAuB7B,EAAOc,GACjC,GACJ,GAAE,CAACY,IAQJ,MAAO,CAACjB,MAAAA,EAAOiB,SAAAA,EAAUlC,aAAAA,EAAckB,aANlB,SAAAoB,GACjBA,EAAEC,iBACFzB,GAAS,UAAIG,IACbiB,GAAS,UAAIlB,GAChB,EAGJ,C","sources":["components/TextField/InputField.jsx","components/RegisterForm/initialState.js","components/RegisterForm/fields.js","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/register-page.styled.jsx","pages/RegisterPage/RegisterPage.jsx","shared/hooks/useForm.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nimport { useMemo } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport { TextField } from '@mui/material';\n\nconst InputField = ({ handleChange, ...props }) => {\n  const id = useMemo(() => nanoid(), []);\n\n  return (\n    <TextField\n      htmlFor={id}\n      variant=\"outlined\"\n      onChange={handleChange}\n      {...props}\n    />\n  );\n};\n\nexport default InputField;\n\nInputField.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n};\n","const initialState = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nexport default initialState;\n","const fields = {\n  name: {\n    type: 'text',\n    name: 'name',\n    required: true,\n    label: 'User name',\n    // placeholder: 'User name',\n  },\n  email: {\n    type: 'email',\n    name: 'email',\n    required: true,\n    label: 'User email',\n    // placeholder: 'User email',\n  },\n  password: {\n    type: 'password',\n    name: 'password',\n    required: true,\n    label: 'User password',\n    // placeholder: 'User password',\n  },\n};\n\nexport default fields;\n","import PropTypes from 'prop-types';\n\nimport useForm from 'shared/hooks/useForm';\nimport InputField from 'components/TextField/InputField';\nimport initialState from './initialState';\nimport fields from './fields';\n\nimport { Button } from '@mui/material';\n\nconst RegisterForm = ({ onSubmit }) => {\n  const { state, handleChange, handleSubmit } = useForm({\n    initialState,\n    onSubmit,\n  });\n  const { name, email, password } = state;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <InputField\n        sx={{ width: '350px' }}\n        value={name}\n        handleChange={handleChange}\n        {...fields.name}\n        margin=\"dense\"\n      />\n      <InputField\n        sx={{ width: '350px', marginTop: '15px' }}\n        value={email}\n        handleChange={handleChange}\n        {...fields.email}\n        margin=\"dense\"\n      />\n      <InputField\n        sx={{ width: '350px', marginTop: '15px' }}\n        value={password}\n        handleChange={handleChange}\n        {...fields.password}\n        margin=\"dense\"\n      />\n      <Button\n        sx={{ width: '350px', marginTop: '15px' }}\n        variant=\"contained\"\n        type=\"submit\"\n      >\n        Sign up\n      </Button>\n    </form>\n  );\n};\nexport default RegisterForm;\n\nRegisterForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nconst RegisterBox = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-bottom: 2px;\n`;\n\nexport { RegisterBox };\n","import { useDispatch } from 'react-redux';\n\nimport { signup } from 'redux/auth/auth-operations';\n\nimport RegisterForm from 'components/RegisterForm/RegisterForm';\nimport { RegisterBox } from '../RegisterPage/register-page.styled';\n\nconst RegisterPage = () => {\n  const dispatch = useDispatch();\n  const handleSignup = data => {\n    dispatch(signup(data));\n  };\n\n  return (\n    <RegisterBox>\n      <RegisterForm onSubmit={handleSignup} />\n    </RegisterBox>\n  );\n};\n\nexport default RegisterPage;\n","import { useState, useCallback } from \"react\";\n\nconst useForm = ({initialState, onSubmit})=> {\n    const [state, setState] = useState({...initialState})\n\n    const handleChange = useCallback(({target}) => {\n        const {name, value} = target;\n        setState(prevState => {\n            return {...prevState, [name]: value}\n        })\n    }, [setState]);\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        onSubmit({...state});\n        setState({...initialState});\n    };\n\n    return {state, setState, handleChange, handleSubmit}\n}\n\nexport default useForm;"],"names":["handleChange","props","id","useMemo","nanoid","htmlFor","variant","onChange","name","email","password","type","required","label","onSubmit","useForm","initialState","state","handleSubmit","InputField","sx","width","value","fields","margin","marginTop","Button","RegisterBox","styled","dispatch","useDispatch","data","signup","useState","setState","useCallback","target","prevState","e","preventDefault"],"sourceRoot":""}