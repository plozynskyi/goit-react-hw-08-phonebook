{"version":3,"file":"static/js/724.df60583f.chunk.js","mappings":"+MAEMA,E,QAAaC,EAAAA,OAAH,gd,SCEVC,EAAS,SAAC,GAAsC,EAApCC,SAAqC,IAA3BC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACzC,OACE,SAACN,EAAD,CAAYI,QAASA,EAASC,KAAMA,EAApC,SACGC,GAGN,EAED,IAEAJ,EAAOK,aAAe,CACpBF,KAAM,UAGRH,EAAOM,WAAa,CAClBJ,QAASK,IAAAA,KAAAA,WACTJ,KAAMI,IAAAA,MAAgB,CAAC,SAAU,SAAU,UAC3CN,SAAUM,IAAAA,QAAAA,W,yGCDZ,IAfmB,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,aAAiBC,GAAY,YAC3CC,GAAKC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAEnC,OACE,0BACE,SAAC,KAAD,QACEC,QAASH,EACTI,QAAQ,WACRC,SAAUP,GACNC,KAIX,C,yHCDD,EAjBe,CACbO,MAAO,CACLb,KAAM,QACNc,KAAM,QACNC,UAAU,EACVC,MAAO,cAGTC,SAAU,CACRjB,KAAM,WACNc,KAAM,WACNC,UAAU,EACVC,MAAO,kBCPX,EALqB,CACnBH,MAAO,GACPI,SAAU,I,mBC+BZ,EAzBkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,GAA8CC,EAAAA,EAAAA,GAAQ,CACpDC,aAAAA,EACAF,SAAAA,IAFMG,EAAR,EAAQA,MAAOhB,EAAf,EAAeA,aAAciB,EAA7B,EAA6BA,aAIrBT,EAAoBQ,EAApBR,MAAOI,EAAaI,EAAbJ,SAEf,OACE,kBAAMC,SAAUI,EAAhB,WACE,SAACC,EAAA,GAAD,gBACEC,MAAOX,EACPR,aAAcA,GACVoB,EAAAA,OAHN,IAIEC,OAAO,YAET,SAACH,EAAA,GAAD,gBACEC,MAAOP,EACPZ,aAAcA,GACVoB,EAAAA,UAHN,IAIEC,OAAO,YAET,SAAC7B,EAAA,EAAD,CAAQI,KAAM,cAGnB,ECbD,EAbkB,WAChB,IAAM0B,GAAWC,EAAAA,EAAAA,MAKjB,OACE,gBAAKC,UAAU,YAAf,UACE,SAAC,EAAD,CAAWX,SANM,SAAAY,GACnBH,GAASI,EAAAA,EAAAA,IAAOD,GACjB,KAOF,C,kECID,IAnBgB,SAAC,GAA6B,IAA5BV,EAA2B,EAA3BA,aAAcF,EAAa,EAAbA,SAC5B,GAA0Bc,EAAAA,EAAAA,WAAS,UAAIZ,IAAvC,eAAOC,EAAP,KAAcY,EAAd,KAEM5B,GAAe6B,EAAAA,EAAAA,cAAY,YAAe,IAAbC,EAAY,EAAZA,OACxBrB,EAAeqB,EAAfrB,KAAMU,EAASW,EAATX,MACbS,GAAS,SAAAG,GACL,OAAO,kBAAIA,GAAX,cAAuBtB,EAAOU,GACjC,GACJ,GAAE,CAACS,IAQJ,MAAO,CAACZ,MAAAA,EAAOY,SAAAA,EAAU5B,aAAAA,EAAciB,aANlB,SAAAe,GACjBA,EAAEC,iBACFpB,GAAS,UAAIG,IACbY,GAAS,UAAIb,GAChB,EAGJ,C","sources":["components/Button/button.styled.jsx","components/Button/Button.jsx","components/TextField/InputField.jsx","components/LoginForm/fields.js","components/LoginForm/initialState.js","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx","shared/hooks/useForm.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst ButtonMain = styled.button`\n  display: inline-block;\n  padding: 10px 15px;\n  background-color: #fff;\n  border: 2px solid #000;\n  border-radius: 5px;\n  font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif;\n  cursor: pointer;\n  width: 100px;\n  font-size: 14px;\n  font-weight: bold;\n  transition: border 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  :hover {\n    color: coral;\n    border: 2px solid coral;\n  }\n`;\n\nexport { ButtonMain };\n","import PropTypes from 'prop-types';\n\nimport { ButtonMain } from './button.styled';\n\nconst Button = ({ children, onClick, type, text }) => {\n  return (\n    <ButtonMain onClick={onClick} type={type}>\n      {text}\n    </ButtonMain>\n  );\n};\n\nexport default Button;\n\nButton.defaultProps = {\n  type: 'submit',\n};\n\nButton.prototypes = {\n  onClick: PropTypes.func.isRequired,\n  type: PropTypes.oneOf(['submit', 'button', 'reset']),\n  children: PropTypes.element.isRequired,\n};\n","import { useMemo } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport { TextField } from '@mui/material';\n\nconst InputField = ({ handleChange, ...props }) => {\n  const id = useMemo(() => nanoid(), []);\n\n  return (\n    <div>\n      <TextField\n        htmlFor={id}\n        variant=\"outlined\"\n        onChange={handleChange}\n        {...props}\n      />\n    </div>\n  );\n};\n\nexport default InputField;\n","const fields = {\n  email: {\n    type: 'email',\n    name: 'email',\n    required: true,\n    label: 'User email',\n    // placeholder: 'User email',\n  },\n  password: {\n    type: 'password',\n    name: 'password',\n    required: true,\n    label: 'User password',\n    // placeholder: 'User password',\n  },\n};\n\nexport default fields;\n","const initialState = {\n  email: '',\n  password: '',\n};\n\nexport default initialState;\n","import useForm from 'shared/hooks/useForm';\n\nimport InputField from 'components/TextField/InputField';\n\nimport fields from './fields';\nimport initialState from './initialState';\nimport Button from 'components/Button/Button';\n\nconst LoginForm = ({ onSubmit }) => {\n  const { state, handleChange, handleSubmit } = useForm({\n    initialState,\n    onSubmit,\n  });\n  const { email, password } = state;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <InputField\n        value={email}\n        handleChange={handleChange}\n        {...fields.email}\n        margin=\"dense\"\n      />\n      <InputField\n        value={password}\n        handleChange={handleChange}\n        {...fields.password}\n        margin=\"dense\"\n      />\n      <Button text={'Sign in'} />\n    </form>\n  );\n};\nexport default LoginForm;\n","import { useDispatch } from 'react-redux';\n\nimport { signin } from 'redux/auth/auth-operations';\n\nimport LoginForm from 'components/LoginForm/LoginForm';\n\nconst LoginPage = () => {\n  const dispatch = useDispatch();\n  const handleSignin = data => {\n    dispatch(signin(data));\n  };\n\n  return (\n    <div className=\"container\">\n      <LoginForm onSubmit={handleSignin} />\n    </div>\n  );\n};\n\nexport default LoginPage;\n","import { useState, useCallback } from \"react\";\n\nconst useForm = ({initialState, onSubmit})=> {\n    const [state, setState] = useState({...initialState})\n\n    const handleChange = useCallback(({target}) => {\n        const {name, value} = target;\n        setState(prevState => {\n            return {...prevState, [name]: value}\n        })\n    }, [setState]);\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        onSubmit({...state});\n        setState({...initialState});\n    };\n\n    return {state, setState, handleChange, handleSubmit}\n}\n\nexport default useForm;"],"names":["ButtonMain","styled","Button","children","onClick","type","text","defaultProps","prototypes","PropTypes","handleChange","props","id","useMemo","nanoid","htmlFor","variant","onChange","email","name","required","label","password","onSubmit","useForm","initialState","state","handleSubmit","InputField","value","fields","margin","dispatch","useDispatch","className","data","signin","useState","setState","useCallback","target","prevState","e","preventDefault"],"sourceRoot":""}